name: Rust

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    strategy:
      # Don't stop building if it fails on an OS
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - uses: dtolnay/rust-toolchain@stable
      - name: Check
        run: cargo check --verbose
      - name: Build
        run: cargo build --verbose
      - name: Run tests
        run: cargo test --all --verbose
  fmt:
    name: Clippy, formatting and docs
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
      - name: Formatting
        run: cargo fmt --all -- --check
      - name: Clippy
        run: cargo clippy --workspace -- -Dclippy::all
      - name: Documentation
        env:
          RUSTDOCFLAGS: -Dwarnings
        run: cargo doc --workspace --exclude llm-cli

  metal:
    name: Build with metal support
    runs-on: macos-latest
    steps: 
    - uses: actions/checkout@v3
      with:
        submodules: recursive
    - uses: dtolnay/rust-toolchain@stable
    - name: Check
      run: cargo check --verbose
    - name: Build
      run: cargo build --verbose --features metal

  # cuda:
  #   name: Build with cuda support
  #   strategy:
  #   # Don't stop building if it fails on an OS
  #     fail-fast: false
  #     matrix:
  #       os: [windows-latest, ubuntu-latest]
  #   runs-on: ${{ matrix.os }}
  #   steps: 
  #     - uses: actions/checkout@v3
  #       with:
  #         submodules: recursive
  #     - uses: Jimver/cuda-toolkit@v0.2.10
  #       if: matrix.os == 'ubuntu-latest'
  #       id: cuda-toolkit-linux
  #       with:
  #         cuda: '12.1.0'
  #         method: 'network'
  #         #See e.g. https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/
  #         sub-packages: '["nvcc","compiler","libraries","libraries-dev","cudart","cudart-dev","libcublas","libcublas-dev"]'
  #     - uses: Jimver/cuda-toolkit@v0.2.10
  #       if: matrix.os == 'windows-latest'
  #       id: cuda-toolkit-windows
  #       with:
  #         cuda: '12.1.0'
  #         method: 'network'
  #         #See https://docs.nvidia.com/cuda/cuda-installation-guide-microsoft-windows/index.html#install-the-cuda-software
  #         sub-packages: '["nvcc","cudart","visual_studio_integration","cublas_dev","cublas"]'
  #     - uses: dtolnay/rust-toolchain@stable
  #     - name: Check
  #       run: cargo check --verbose
  #     - name: Build
  #       run: cargo build --verbose --features cublas

  opencl:
    name: Build with opencl support
    strategy:
    # Don't stop building if it fails on an OS
      fail-fast: false
      matrix:
        # TODO Add windows opencl build
        os: [windows-latest, ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps: 
      - uses: actions/checkout@v3
        with:
          submodules: recursive
     
      - name: Install CLBlast on linux
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt install libclblast-dev 

      - name: Install vcpkg on windows
        if: matrix.os == 'windows-latest'
        run: |
          git clone https://github.com/microsoft/vcpkg.git
          cd vcpkg
          ./bootstrap-vcpkg.sh
          
      - name: Install OpenCL on windows
        if: matrix.os == 'windows-latest'
        run: |
          ${{ github.workspace }}\vcpkg\vcpkg.exe install opencl:x64-windows

      - name: Install CLBlast on windows
        if: matrix.os == 'windows-latest'
        run: |
          ${{ github.workspace }}\vcpkg\vcpkg.exe install clblast:x64-windows

      - name: Set Environment Variables
        if: matrix.os == 'windows-latest'
        run: |
          echo "${{ github.workspace }}/vcpkg/packages/clblast_x64-windows" >> $CLBLAST_PATH
          echo "${{ github.workspace }}/vcpkg/packages/opencl_x64-windows" >> $OPENCL_PATH
        shell: bash

      - uses: dtolnay/rust-toolchain@stable
      - name: Check
        run: cargo check --verbose
      - name: Build
        run: cargo build --verbose --features clblast
